name: Backend Production Deploy 

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - 'packages/**'
      - 'package.json'
      - 'pnpm-workspace.yaml'
      - 'pnpm-lock.yaml'
      - 'web.config'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: parkingmate-api
  NODE_VERSION: '20.x'
  COMMIT_HASH: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.0

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate API types
      run: pnpm --filter @parkingmate/api api:generate

    - name: Build backend API
      run: pnpm --filter @parkingmate/api build

    

    - name: Prepare standalone deployment
      shell: bash
      run: |
        # Create a standalone deployment directory without workspace dependencies
        mkdir -p deploy
        
        # Copy built files
        cp -r apps/api/dist deploy/
        
        # Copy openapi.yml file to both locations (root and dist/src for compatibility)
        cp apps/api/openapi.yml deploy/
        mkdir -p deploy/dist/src
        cp apps/api/openapi.yml deploy/dist/src/
        
        # Copy and modify package.json to remove workspace dependencies
        cd apps/api
        node -e "
          const pkg = require('./package.json');
          delete pkg.devDependencies;
          if (pkg.dependencies) {
            Object.keys(pkg.dependencies).forEach(key => {
              if (typeof pkg.dependencies[key] === 'string' && pkg.dependencies[key].startsWith('workspace:')) {
                delete pkg.dependencies[key];
              }
            });
          }
          const fs = require('fs');
          fs.writeFileSync('../../deploy/package.json', JSON.stringify(pkg, null, 2));
        "
        cd ../..
        
        # Copy web.config
        cp web.config deploy/
        
        # Install production dependencies for Windows with native builds
        cd deploy
        # Use npm for production to ensure Windows-compatible native modules
        npm install --production --no-optional
        cd ..
        
        echo "Deployment directory prepared"
        ls -la deploy/
        
        # Verify bcrypt module is present
        if [ -d "deploy/node_modules/bcrypt" ]; then
          echo "✓ bcrypt module installed"
        else
          echo "✗ WARNING: bcrypt module not found"
        fi
        
    - name: Create deployment package
      run: |
        # Package the standalone deployment directory
        cd deploy
        zip -r ../web-app.zip . \
          -x "**/.git/*" \
          -x "**/*.log"
        cd ..
        
        echo "Deployment package created:"
        unzip -l web-app.zip | head -20

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_API_STAGING }}
        package: web-app.zip