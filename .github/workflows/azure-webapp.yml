name: Backend Production Deploy 

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - 'packages/**'
      - 'package.json'
      - 'pnpm-workspace.yaml'
      - 'pnpm-lock.yaml'
      - 'web.config'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: parkingmate-api
  NODE_VERSION: '20.x'
  COMMIT_HASH: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.0

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile --prefer-offline

    - name: Generate API types
      working-directory: apps/api
      run: pnpm api:generate

    - name: Build backend API
      working-directory: apps/api
      run: pnpm build

    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('apps/api/package.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Prepare standalone deployment
      run: |
        # Create a standalone deployment directory without workspace dependencies
        mkdir -p deploy
        
        # Copy built files
        cp -r apps/api/dist deploy/
        
        # Copy and modify package.json to remove workspace dependencies
        cd apps/api
        node -e "
          const pkg = require('./package.json');
          delete pkg.devDependencies;
          // Remove workspace protocol from dependencies
          if (pkg.dependencies) {
            Object.keys(pkg.dependencies).forEach(key => {
              if (pkg.dependencies[key].startsWith('workspace:')) {
                delete pkg.dependencies[key];
              }
            });
          }
          const fs = require('fs');
          fs.writeFileSync('../../deploy/package.json', JSON.stringify(pkg, null, 2));
        "
        cd ../..
        
        # Copy web.config
        cp web.config deploy/
        
        # Install production dependencies using npm (not pnpm) to avoid workspace issues
        cd deploy
        npm install --production --legacy-peer-deps --prefer-offline
        cd ..
        
        echo "Deployment directory prepared"
        ls -la deploy/
        
    - name: Create deployment package
      run: |
        # Package the standalone deployment directory
        cd deploy
        zip -r ../web-app.zip . \
          -x "**/.git/*" \
          -x "**/*.log"
        cd ..
        
        echo "Deployment package created:"
        unzip -l web-app.zip | head -20

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_API_STAGING }}
        package: web-app.zip