/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Admin login
         * @description Authenticate an admin user and receive access tokens
         */
        post: operations["adminLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Admin registration
         * @description Register a new admin user
         */
        post: operations["adminRegister"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Admin logout
         * @description Logout and invalidate admin session
         */
        post: operations["adminLogout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Get the currently authenticated user information
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register-customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Customer registration
         * @description Register a new customer and send OTP for verification
         */
        post: operations["registerCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/customer/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Customer signin
         * @description Initiate customer signin and send OTP
         */
        post: operations["customerSignin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify-otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify OTP
         * @description Verify OTP code for customer authentication
         */
        post: operations["verifyOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Refresh an expired access token using a refresh token
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/customer/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Customer logout
         * @description Logout and invalidate customer session
         */
        post: operations["customerLogout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/validate-registration-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate registration token
         * @description Validate a registration token for customer registration
         */
        post: operations["validateRegistrationToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get customer information
         * @description Retrieve the authenticated customer profile information
         */
        get: operations["getCustomer"];
        /**
         * Update customer information
         * @description Update the authenticated customer profile information
         */
        put: operations["updateCustomer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/cars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add customer car
         * @description Add a new car to the customer profile
         */
        post: operations["addCar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/cars/{carId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update customer car
         * @description Update an existing car in the customer profile
         */
        put: operations["updateCar"];
        post?: never;
        /**
         * Delete customer car
         * @description Remove a car from the customer profile
         */
        delete: operations["deleteCar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get admin profile
         * @description Retrieve the authenticated admin user profile
         */
        get: operations["getAdminProfile"];
        /**
         * Update admin profile
         * @description Update the authenticated admin user profile
         */
        put: operations["updateAdminProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/profile/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change admin password
         * @description Change the password for the authenticated admin user
         */
        post: operations["changeAdminPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all customers
         * @description Get all customers for the admin's organization
         */
        get: operations["getAllCustomers"];
        put?: never;
        /**
         * Create customer
         * @description Create a new customer with optional car data
         */
        post: operations["createCustomerByAdmin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/customers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get customer by ID
         * @description Get customer details with all associated cars
         */
        get: operations["getCustomerById"];
        /**
         * Update customer
         * @description Update customer information and cars
         */
        put: operations["updateCustomerByAdmin"];
        post?: never;
        /**
         * Delete customer
         * @description Soft delete a customer (sets status to inactive)
         */
        delete: operations["deleteCustomerByAdmin"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parking-lots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List parking lots
         * @description Get all parking lots with pagination and filters
         */
        get: operations["listParkingLots"];
        put?: never;
        /**
         * Create parking lot
         * @description Create a new parking lot
         */
        post: operations["createParkingLot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parking-lots/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get parking lot by ID
         * @description Retrieve a single parking lot by its ID
         */
        get: operations["getParkingLotById"];
        put?: never;
        post?: never;
        /**
         * Delete parking lot
         * @description Soft delete a parking lot
         */
        delete: operations["deleteParkingLot"];
        options?: never;
        head?: never;
        /**
         * Update parking lot
         * @description Update an existing parking lot
         */
        patch: operations["updateParkingLot"];
        trace?: never;
    };
    "/guest/validate-plate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate guest license plate
         * @description Validate a guest license plate for parking access (public endpoint with reCAPTCHA)
         */
        post: operations["validateGuestPlate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datahub/entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process camera entry event
         * @description Webhook endpoint for ALPR camera system to process vehicle entry events
         */
        post: operations["processCameraEntry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check API server health status
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/seed-db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Seed database
         * @description Seed the database with initial data (development only)
         */
        post: operations["seedDatabase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @example false */
            success: boolean;
            error: {
                /** @example VALIDATION_ERROR */
                code: string;
                /** @example Validation failed */
                message: string;
                details?: Record<string, never>;
            };
        };
        SuccessResponse: {
            /** @example true */
            success: boolean;
        };
        LoginRequest: {
            /**
             * Format: email
             * @example admin@parkingmate.com
             */
            email: string;
            /**
             * Format: password
             * @example SecurePass123!
             */
            password: string;
        };
        RegisterRequest: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
            firstName: string;
            lastName: string;
        };
        AuthTokens: {
            accessToken: string;
            refreshToken: string;
            expiresIn: number;
            /** @example Bearer */
            tokenType?: string;
        };
        LoginResponse: components["schemas"]["AuthTokens"] & {
            user?: {
                /** Format: uuid */
                id: string;
                /** Format: email */
                email: string;
                role: string;
                firstName?: string;
                lastName?: string;
            };
        };
        User: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            orgId: string;
            firstName: string;
            lastName: string;
            /** Format: email */
            email: string;
            address?: string;
            postalCode?: string;
            city?: string;
            /** @enum {string} */
            role: "admin" | "customer";
            status: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Customer: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            orgId: string;
            name: string;
            /** Format: email */
            email: string;
            phoneNumber?: string;
            registered?: boolean;
            status: string;
            /** @enum {string} */
            membershipStatus?: "active" | "expired";
            /** Format: date-time */
            membershipExpiryDate?: string;
            address?: string;
            postalCode?: string;
            city?: string;
            cars: components["schemas"]["Car"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Car: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            orgId: string;
            licensePlate: string;
            brand?: string;
            model?: string;
            label?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ParkingLot: {
            /** Format: uuid */
            id: string;
            orgId: string;
            name: string;
            address: string;
            city: string;
            country: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateParkingLotRequest: {
            name: string;
            address: string;
            city: string;
            country: string;
            /** Format: date-time */
            update_at?: string;
            /** Format: date-time */
            createdAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    adminLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["LoginResponse"];
                    };
                };
            };
            /** @description Invalid credentials */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    adminRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Registration successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["LoginResponse"];
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    adminLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Optional refresh token to revoke */
                    refreshToken?: string;
                };
            };
        };
        responses: {
            /** @description Logout successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User information retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["User"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    registerCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Registration token received via email */
                    registrationToken: string;
                };
            };
        };
        responses: {
            /** @description OTP sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: {
                            /** @example OTP code sent to your email */
                            message?: string;
                            /** Format: email */
                            email?: string;
                        };
                    };
                };
            };
        };
    };
    customerSignin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            /** @description OTP sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    verifyOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    email: string;
                    otpCode: string;
                };
            };
        };
        responses: {
            /** @description OTP verified successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["AuthTokens"];
                    };
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    refreshToken: string;
                };
            };
        };
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["AuthTokens"];
                    };
                };
            };
        };
    };
    customerLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Optional refresh token to revoke */
                    refreshToken?: string;
                };
            };
        };
        responses: {
            /** @description Logout successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    validateRegistrationToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    token: string;
                };
            };
        };
        responses: {
            /** @description Token validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: {
                            valid: boolean;
                            customer?: {
                                /** Format: uuid */
                                id?: string;
                                /** Format: email */
                                email?: string;
                                name?: string;
                                registered?: boolean;
                            };
                            error?: string;
                        };
                    };
                };
            };
        };
    };
    getCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer information retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Customer"];
                    };
                };
            };
        };
    };
    updateCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    firstName?: string;
                    lastName?: string;
                    /** Format: email */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description Customer information updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    addCar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    licensePlate: string;
                    brand?: string;
                    model?: string;
                    color?: string;
                };
            };
        };
        responses: {
            /** @description Car added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Car"];
                    };
                };
            };
        };
    };
    updateCar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                carId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    licensePlate?: string;
                    brand?: string;
                    model?: string;
                    color?: string;
                };
            };
        };
        responses: {
            /** @description Car updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    deleteCar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                carId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Car deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdminProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Admin profile retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["User"];
                    };
                };
            };
        };
    };
    updateAdminProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    firstName?: string;
                    lastName?: string;
                    /** Format: email */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description Admin profile updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    changeAdminPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: password */
                    currentPassword: string;
                    /** Format: password */
                    newPassword: string;
                };
            };
        };
        responses: {
            /** @description Password changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    getAllCustomers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customers retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Customer"][];
                    };
                };
            };
        };
    };
    createCustomerByAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                    phoneNumber?: string;
                    address?: string;
                    postalCode?: string;
                    city?: string;
                    /** @default false */
                    isPermanentParker?: boolean;
                    /** Format: date */
                    parkingStartDate?: string;
                    /** Format: date */
                    parkingEndDate?: string;
                    cars?: {
                        licensePlate: string;
                        brand?: string;
                        model?: string;
                        label?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Customer created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Customer"];
                    };
                };
            };
        };
    };
    getCustomerById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Customer"];
                    };
                };
            };
        };
    };
    updateCustomerByAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    /** Format: email */
                    email?: string;
                    phoneNumber?: string;
                    address?: string;
                    postalCode?: string;
                    city?: string;
                    isPermanentParker?: boolean;
                    /** Format: date */
                    parkingStartDate?: string;
                    /** Format: date */
                    parkingEndDate?: string;
                    cars?: {
                        /** Format: uuid */
                        id?: string;
                        licensePlate: string;
                        brand?: string;
                        model?: string;
                        label?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Customer updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["Customer"];
                    };
                };
            };
        };
    };
    deleteCustomerByAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listParkingLots: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                city?: string;
                isActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Parking lots retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["ParkingLot"][];
                        meta?: {
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    createParkingLot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateParkingLotRequest"];
            };
        };
        responses: {
            /** @description Parking lot created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["ParkingLot"];
                    };
                };
            };
        };
    };
    getParkingLotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Parking lot retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["ParkingLot"];
                    };
                };
            };
            /** @description Parking lot not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteParkingLot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Parking lot deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateParkingLot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    description?: string;
                    pricePerHour?: string;
                    openingTime?: string;
                    closingTime?: string;
                    isOpen247?: boolean;
                    isActive?: boolean;
                };
            };
        };
        responses: {
            /** @description Parking lot updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"] & {
                        data?: components["schemas"]["ParkingLot"];
                    };
                };
            };
        };
    };
    validateGuestPlate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    licensePlate: string;
                    recaptchaToken: string;
                };
            };
        };
        responses: {
            /** @description License plate validated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    processCameraEntry: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    licensePlate?: string;
                    /** Format: date-time */
                    timestamp?: string;
                    cameraId?: string;
                    imageUrl?: string;
                };
            };
        };
        responses: {
            /** @description Entry event processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** Format: date-time */
                        timestamp?: string;
                        uptime?: number;
                    };
                };
            };
        };
    };
    seedDatabase: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Database seeded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
}
